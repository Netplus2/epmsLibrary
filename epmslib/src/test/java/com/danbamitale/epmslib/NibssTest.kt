package com.danbamitale.epmslib


import com.danbamitale.epmslib.entities.NibssAID
import com.danbamitale.epmslib.entities.NibssCA
import org.junit.Test
import org.junit.Assert.*

class NibssTest {

    @Test
    fun testNibssCAPKParsing() {
        val data = "320020133001134001A35010A0000000033600201372863001FFFF13D7D8546984579D1D0F0EA519CFF8DEFFC429354CF3A871A6F7183F1223453455345345345345453454353458DA5C7470C055387100CB935A712C4E2864DF5D64BA93FE7E63E71F25B1E5F5298575EBE1C63AA617706917911DC2A75AC28B251C7EF40F2365912490B939BCA2124A30A28F54402C34AECA331AB67E1E79B285DD5771B5D9FF79EA630B75380020339040E0EEA7033176B896C453BCFC2A942317274DD6BD4000201"
        val ca = NibssCA.parse(data)
        assertEquals("Key Index", "01", ca.keyIndex)
        assertEquals("Internal Key Reference", 1, ca.internalReferenceNumber)
        assertEquals("CA Key name", "A", ca.keyName)
        assertEquals("RID", "A000000003", ca.RID)
        assertEquals("Hash Algorithm", "01", ca.hashAlgorithm)
        assertEquals("Modulus", "3001FFFF13D7D8546984579D1D0F0EA519CFF8DEFFC429354CF3A871A6F7183F1223453455345345345345453454353458DA5C7470C055387100CB935A712C4E2864DF5D64BA93FE7E63E71F25B1E5F5298575EBE1C63AA617706917911DC2A75AC28B251C7EF40F2365912490B939BCA2124A30A28F54402C34AECA331AB67E1E79B285DD5771B5D9FF79EA630B75", ca.modulus)
        assertEquals("Exponent", "03", ca.exponent)
        assertEquals("PK Hash", "E0EEA7033176B896C453BCFC2A942317274DD6BD", ca.hash)
        assertEquals("Key Algorithm", "01", ca.keyAlgorithm)

    }


    @Test
    fun testNibssAIDParsing() {
        val data = "13001114001115014A000000004306016001017007MAESTRO190011200069F3704210309F02069F370495059A039C015F2A0229010F850ACA00030010000000000031010F850ACF800"

        val aid = NibssAID.parse(data)

        assertEquals("AID Index", "1", aid.index)
        assertEquals("Internal Ref Number", 1, aid.internalReferenceNumber)
        assertEquals("AID", "A0000000043060", aid.AID)
        assertEquals("Match", 0, aid.match)
        assertEquals("", "MAESTRO", aid.applicationName)
        assertEquals("", "", aid.applicationVersion)
        assertEquals("", "1", aid.appSelectionPriority)
        assertEquals("", "9F3704", aid.DDOL)
        assertEquals("", "9F02069F370495059A039C015F2A02", aid.TDOL)
        assertEquals("", "", aid.tflDomestic)
        assertEquals("", "", aid.tflInternational)
        assertEquals("", "", aid.offlineThresholdDomestic)
        assertEquals("", "", aid.maxTargetDomestic)
        assertEquals("", "", aid.maxTargetInternational)
        assertEquals("", "", aid.targetPercentageDomestic)
        assertEquals("", "", aid.targetPercentageInternational)
        assertEquals("", "F850ACA000", aid.tacDefault)
        assertEquals("", "0000000000", aid.tacDenial)
        assertEquals("", "F850ACF800", aid.tacOnline)

    }

    @Test
    fun testNibssCAPKResponseParsing() {
        val data = "320020133001134001A35010A0000000033600201372863001FFFF13D7D8546984579D1D0F0EA519CFF8DEFFC429354CF3A871A6F7183F1223453455345345345345453454353458DA5C7470C055387100CB935A712C4E2864DF5D64BA93FE7E63E71F25B1E5F5298575EBE1C63AA617706917911DC2A75AC28B251C7EF40F2365912490B939BCA2124A30A28F54402C34AECA331AB67E1E79B285DD5771B5D9FF79EA630B75380020339040E0EEA7033176B896C453BCFC2A942317274DD6BD4000201~320029233001234001A35010A000000003360020137352996AF56F569187D09293C14810450ED8EE3357397B18A2458EFAA92DA3B6DF6514EC060195318FD43BE9B8F0CC669E3F844057CBDDF8BDA191BB64473BC8DC9A730DB8F6B4EDE3924186FFD9B8C7735789C23A36BA0B8AF65372EB57EA5D89E7D14E9C7B6B557460F10885DA16AC923F15AF3758F0F03EBD3C5C2C949CBA306DB44E6A2C076C5F67E281D7EF56785DC4D75945E491F01918800A9E2DC66F60080566CE0DAF8D17EAD46AD8E30A247C9F380020339040429C954A3859CEF91295F663C963E582ED6EB2534000201~320029433001334001A35010A000000003360020137496ACD2B12302EE644F3F835ABD1FC7A6F62CCE48FFEC622AA8EF062BEF6FB8BA8BC68BBF6AB5870EED579BC3973E121303D34841A796D6DCBC41DBF9E52C4609795C0CCF7EE86FA1D5CB041071ED2C51D2202F63F1156C58A92D38BC60BDF424E1776E2BC9648078A03B36FB554375FC53D57C73F5160EA59F3AFC5398EC7B67758D65C9BFF7828B6B82D4BE124A416AB7301914311EA462C19F771F31B3B57336000DFF732D3B83DE07052D730354D297BEC72871DCCF0E193F171ABA27EE464C6A97690943D59BDABB2A27EB71CEEBDAFA1176046478FD62FEC452D5CA393296530AA3F41927ADFE434A2DF2AE3054F8840657A26E0FC617380020339040C4A3C43CCF87327D136B804160E47D43B60E6E0F4000201~320029533001434001A35010A000000003360020137288BE9E1FA5E9A803852999C4AB432DB28600DCD9DAB76DFAAA47355A0FE37B1508AC6BF38860D3C6C2E5B12A3CAAF2A7005A7241EBAA7771112C74CF9A0634652FBCA0E5980C54A64761EA101A114E0F0B5572ADD57D010B7C9C887E104CA4EE1272DA66D997B9A90B5A6D624AB6C57E73C8F919000EB5F684898EF8C3DBEFB330C62660BED88EA78E909AFF05F6DA627B380020339040EE1511CEC71020A9B90443B37B1D5F6E703030F64000201~320029733001534001A35010A000000003360020137192AF0754EAED977043AB6F41D6312AB1E22A6809175BEB28E70D5F99B2DF18CAE73519341BBBD327D0B8BE9D4D0E15F07D36EA3E3A05C892F5B19A3E9D3413B0D97E7AD10A5F5DE8E38860C0AD004B1E06F4040C295ACB457A788551B6127C0B293800203390408001CA76C1203955E2C62841CD6F201087E564BF4000201~320029933001634001A35010A000000003360020137256AB79FCC9520896967E776E64444E5DCDD6E13611874F3985722520425295EEA4BD0C2781DE7F31CD3D041F565F747306EED62954B17EDABA3A6C5B85A1DE1BEB9A34141AF38FCF8279C9DEA0D5A6710D08DB4124F041945587E20359BAB47B7575AD94262D4B25F264AF33DEDCF28E09615E937DE32EDC03C54445FE7E3827773800203390404ABFFD6B1C51212D05552E431C5B17007D2F5E6D4000201~32002EF33001734001A35010A0000000043600201371929E15214212F6308ACA78B80BD986AC287516846C8D548A9ED0A42E7D997C902C3E122D1B9DC30995F4E25C75DD7EE0A0CE293B8CC02B977278EF256D761194924764942FE714FA02E4D57F282BA3B2B62C9E38EF6517823F2CA831BDDF6D363D3800203390405E074ADA2372EA0C8018BBC2C3C1DD7580FFCDBA4000201~32002FE33001834001A35010A000000004360020137256A653EAC1C0F786C8724F737F172997D63D1C3251C44402049B865BAE877D0F398CBFBE8A6035E24AFA086BEFDE9351E54B95708EE672F0968BCD50DCE40F783322B2ABA04EF137EF18ABF03C7DBC5813AEAEF3AA7797BA15DF7D5BA1CBAF7FD520B5A482D8D3FEE105077871113E23A49AF3926554A70FE10ED728CF793B62A13800203390409A295B05FB390EF7923F57618A9FDA2941FC34E04000201~32002F633001934001A35010A000000004360020137448A25A6BD783A5EF6B8FB6F83055C260F5F99EA16678F3B9053E0F6498E82C3F5D1E8C38F13588017E2B12B3D8FF6F50167F46442910729E9E4D1B3739E5067C0AC7A1F4487E35F675BC16E233315165CB142BFDB25E301A632A54A3371EBAB6572DEEBAF370F337F057EE73B4AE46D1A8BC4DA853EC3CC12C8CBC2DA18322D68530C70B22BDAC351DD36068AE321E11ABF264F4D3569BB71214545005558DE26083C735DB776368172FE8C2F5C85E8B5B890CC682911D2DE71FA626B8817FCCC08922B703869F3BAEAC1459D77CD85376BC36182F4238314D6C4212FBDD7F23D3380020339040502909ED545E3C8DBD00EA582D0617FEE9F6F6844000201"
        val caList = NibssCA.parseNibssResponse(data)

        assertEquals("Item count", 9, caList.size)
    }


    @Test
    fun testNibssAIDResponseParsing () {
        val data = "13001114001115014A000000004306016001017007MAESTRO190011200069F3704210309F02069F370495059A039C015F2A0229010F850ACA00030010000000000031010F850ACF800~13001214001215014A000000004101016001017010MASTERCARD180010190011200069F3704210309F02069F370495059A039C015F2A0229010F850ACA00030010000000000031010F850ACF800~13001314001315014A000000003101016001017004VISA18000190011200069F3704230041000240031002500250270022029010DC4000A80030010001000000031010DC4004F800~13001414001415014A000000003201016001017008ELECTRON18000190011200069F3704230035002400152500250270022029010DC4000A80030010001000000031010DC4004F800~13001514001515012A0000000250116001017004AMEX18000190011200069F370424002502500225270021029010C80000000030010000000000031010C800000000~13001614001615016A00000033301010216001017014China Unon Pay190011200069F3704220031002300310024002992500299260029929010FCF0E4080030010001000000031010FCF8E4F880~13001714001715016A00000033301010316001017015China Union Pay190011200069F3704220031002300310024002992500299260029929010FCF0E4080030010001000000031010FCF8E4F880~13001814001815016A00000033301010616001017015China Union Pay190011200069F3704220031002300310024002992500299260029929010FCF0E4080030010001000000031010FCF8E4F880~13001914001915016A00000033301010116001017015China Union Pay190011200069F3704220031002300310024002992500299260029929010FCF0E4080030010001000000031010FCF8E4F880~1300210140021015014A000000371000116001017016Interswitch Verv180040100190011200069F37042700250280022029010FCF0E4080030010001000000031010FCF8E4F880~1300211140021115018A0000003330101010116001017009Union Pay190011200069F370422003100230031002500299260029928001129010FCF0E4080030010001000000031010FCF8E4F880"
        val aidList = NibssAID.parseNibssResponse(data)

        assertTrue("Aid List greater than 1 - ${aidList.size}",  aidList.size > 1)
    }


}